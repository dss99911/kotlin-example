package kim.jeonghyeon.collection

/**
 * map or filter make collection again and again. it has inefficiency
 * but sequence doesn't create collection. but make just one collect when call .toList()
 */
fun sequenceExample1() {
    listOf("apple", "banana", "caramel")
        .asSequence()
        .map { "$it : ${it.length}" }
        .filter { it.length > 3 }
        .toList()
}

fun sequenceExample2() {
    println(fibonacci().take(10).toList()) // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
}

fun fibonacci() = sequence {
    var terms = Pair(0, 1)

    // this sequence is infinite
    while (true) {
        yield(terms.first)
        terms = Pair(terms.second, terms.first + terms.second)
    }
}

fun sum() {
    generateSequence(0) { it + 1 }//each item is generated by the lambda. lambda parameter is previous return value
        .takeWhile { it < 100 }
        .sum()//sum the all the item.

}


